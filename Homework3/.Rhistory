abline(a = coef(m1)[1], b = coef(m1)[2], col = "red", lwd = 3)
plot(x, y)
x2 <- x^2
m2 <- lm(y~ x + x2)
summary(m2)
coef(m2)[1]
coef(m2)[2]
coef(m2)[3]
y_pred <- coef(m2)[1] + coef(m2)[2]*x + coef(m2)[3]*x2
n <- order(x)
lines(x[n], y_pred[n], col = "red", lwd = 3)
legend(x = max(mobile_data$battery_power)*0.7,
y = max(mobile_data$ram),
legend = levels(mobile_data$price_range),
col = 1:4,
pch = 19,
bty = "n")  # bty='n' removes box around legend
# Create scatter plot with colors based on price range
plot(mobile_data$battery_power, mobile_data$ram,
col = as.numeric(mobile_data$price_range),
pch = 19,
xlab = "Battery Power",
ylab = "RAM (MB)",
main = "Battery Power vs RAM by Price Range")
legend(x = max(mobile_data$battery_power)*0.7,
y = max(mobile_data$ram),
legend = levels(mobile_data$price_range),
col = 1:4,
pch = 19,
bty = "n")  # bty='n' removes box around legend
# Create scatter plot with colors based on price range
plot(mobile_data$battery_power, mobile_data$ram,
col = as.numeric(mobile_data$price_range),
pch = 19,
xlab = "Battery Power",
ylab = "RAM (MB)",
main = "Battery Power vs RAM by Price Range")
# Create scatter plot with colors based on price range
plot(mobile_data$battery_power, mobile_data$ram,
col = as.numeric(mobile_data$price_range),
pch = 0,
xlab = "Battery Power",
ylab = "RAM (MB)",
main = "Battery Power vs RAM by Price Range")
boxplot(x, main = "Boxplot", horizontal = TRUE, ylim = c(60, 180))
par(mfrow = c(1, 1))
# Baby weight variable
x <- babies$wt
# Get the quantile summary
summary(x)
# Draw the boxplot
boxplot(x)
boxplot(x, horizontal = TRUE)
par(mfrow = c(2, 1))
hist(x, main = "Histogram", xlab = " ", ylab = " ", xlim = c(60, 180))
boxplot(x, main = "Boxplot", horizontal = TRUE, ylim = c(60, 180))
par(mfrow = c(1, 1))
library(vioplot)
vioplot(x, horizontal = TRUE,
xlab = "Newborn weight (oz)",
col = "orange",
main = "The violin plot of baby weights",
cex.main = 1.8)
# Density plot only
par(mfrow = c(1, 1))
plot(density(x), xlab = " ", las = 1, main = "Density plot of x")
hist(x, xlab = " ", freq = FALSE, las = 1, col = "yellow")
lines(density(x), col = "red")
par(mfrow = c(1, 2))
hist(x, xlab = " ", freq = FALSE, las = 1, col = "yellow")
hist(x, xlab = " ", freq = FALSE, las = 1, col = "yellow")
lines(density(x), col = "red", lwd = 4)
library(UsingR)
# ----------------------------------------------------------------------
# Load data
data("fat")
# Draw a scatter plot for neck against wrist
plot(fat$wrist, fat$neck)
plot(neck ~ wrist, data = fat)
# Draw a scatter plot for height against wrist
plot(height ~ wrist, data = fat)
plot(height ~ wrist, data = fat, subset = height > 50)
# ----------------------------------------------------------------------
# Load data
data("central.park")
barplot(AVG ~ DY, data = central.park,
xlab = "Days in May 2003",
ylab = "Temp. (Fahrenheit)",
main = "Average Temperature at Central Park, NYC",
col = ifelse(central.park$AVG > mean(central.park$AVG), "red",
"blue"),
pch = 19)
# Draw a scatter plot
plot(AVG ~ DY, data = central.park)
# Add a title and axis labels
plot(AVG ~ DY, data = central.park,
xlab = "Days in May 2003",
ylab = "Temp. (Fahrenheit)",
main = "Average Temperature at Central Park, NYC")
# Change the point look
plot(AVG ~ DY, data = central.park,
xlab = "Days in May 2003",
ylab = "Temp. (Fahrenheit)",
main = "Average Temperature at Central Park, NYC",
pch = 16, col = "#e87500")
# Make color indicate if the daily temperature was greater than average
plot(AVG ~ DY, data = central.park,
xlab = "Days in May 2003",
ylab = "Temp. (Fahrenheit)",
main = "Average Temperature at Central Park, NYC",
pch = 16, col = ((central.park$AVG < mean(central.park$AVG)) + 1) * 123)
# Add a title and axis labels
plot(AVG ~ DY, data = central.park,
xlab = "Days in May 2003",
ylab = "Temp. (Fahrenheit)",
main = "Average Temperature at Central Park, NYC",
col = ifelse(central.park$AVG > mean(central.park$AVG), "red",
"blue"),
pch = 19)
points(10, 65, col = "black", pch = 19, cex = 3)
abline(a = 55, b = 1)
points(10, 65, col = "black", pch = 19, cex = 3)
abline(a = 55, b = 0.3, col = "red")
# ----------------------------------------------------------------------
# Draw an empty figure
plot(NULL,
xlim = c(min(central.park$DY), max(central.park$DY)),
ylim = c(min(central.park$AVG), max(central.park$AVG)),
xlab = "Days in May 2003",
ylab = "Temp. (Fahrenheit)")
# Add points
points(central.park$DY, central.park$AVG, pch = 16)
# Draw an empty figure again
plot(NULL,
xlim = c(min(central.park$DY), max(central.park$DY)),
ylim = c(min(central.park$AVG), max(central.park$AVG)),
xlab = "Days in May 2003",
ylab = "Temp. (Fahrenheit)")
# Add line segments
lines(central.park$DY, central.park$AVG)
# Add a horizontal line indicating the average of daily average temperatures
abline(h = mean(central.park$AVG), lty = 2)
# Plot the histogram
hist(x,
breaks = seq(min(x), max(x), length.out = k + 1),
xlab = "Weight", main = " ",
col = "#008542", las = 1)
data("exec.pay")
library(UsingR)
# Load data babies
data("babies")
# Birth weight variable
mean(babies$wt)
# Mother age variable
x <- babies$age
mean(x)
# Example using apply function on babies dataset
# We will calculate the mean of numeric columns in the babies dataset
# Select only numeric columns
numeric_data <- babies[, sapply(babies, is.numeric)]
# Apply the mean function to each column, removing NA values
column_means <- apply(numeric_data, 2, mean, na.rm = TRUE)
print(column_means)
# Change 99 to NA
index_99 <- which(x == 99)
x[index_99] <- NA
mean(x, na.rm = TRUE)
#### PRACTICE
library(UsingR)
data("rivers")
x <- rivers
n <- length(rivers)
# What proportion are less than the median length?
x_bar <- median(x)
print(sum(x < x_bar) / n)
# What proportion are less than the mean length?
x_bar <- mean(x)
print(sum(x < x_bar) / n)
# Compare the mean, median, and 25%-trimmed mean. Is there a big difference among the three numbers?
mean_val <- mean(x)
median_val <- median(x)
trimmed_mean_val <- mean(x, trim = 0.25)
print(paste("Mean:", mean_val))
print(paste("Median:", median_val))
print(paste("25%-trimmed Mean:", trimmed_mean_val))
### END PRACTICE
library(UsingR)
# Load data babies
data("babies")
# Birth weight variable
mean(babies$wt)
median(babies$wt)
summary(babies$wt)
# Load data CEO compensation
data("exec.pay")
mean(exec.pay)
median(exec.pay)
# Get Q(0), Q(1)
range(exec.pay)
# Get Q(0), Q(0.25), Q(0.5), Q(0.75), Q(1)
quantile(exec.pay)
# Get Q(0.2), Q(0.4), Q(0.6), Q(0.8)
quantile(exec.pay, probs = seq(0.2, 0.8, by = 0.2))
# Get any p-th quantile
p <- 0.15
quantile(exec.pay, probs = p)
mean(exec.pay)
median(exec.pay)
mean(exec.pay, trim = 0.05)
mean(exec.pay, trim = 0.2)
data("rivers")
x <- rivers
n <- length(x)
# What proportion are less than the mean
x_bar <- mean(x)
print(sum(x < x_bar) / n)
# Compare the mean, median, and 25%-trimmed mean
print(mean(x))
print(median(x))
print(mean(x, trim = 0.25))
var(babies$wt)
# Sample standard deviation
sqrt(var(babies$wt))
sd(babies$wt)
# Data scaling (z-scores)
z <- c(scale(babies$wt, center = TRUE, scale = TRUE))
z <- (babies$wt - mean(babies$wt)) / sqrt(var(babies$wt))
sum(abs(z) <= 1) / length(z)
sum(abs(z) <= 2) / length(z)
sum(abs(z) <= 3) / length(z)
# IQR
IQR(babies$wt)
# Range
range(babies$wt)
z <- rivers
z <- (z - mean(z))/sd(z)
sum(abs(z) <= 1) / length(z)
sum(abs(z) <= 2) / length(z)
## PRACTICE 2
library(UsingR)
x <- data("rivers")
n <- length(x)
# Compare the standard deviation, IQR, and MAD for babies$wt
z <- rivers
z <- (z - mean(z))/sd(z)
sum(abs(z) <= 1) / length(z)
sum(abs(z) <= 2) / length(z)
hist(z)
#End practice 2
# Load data babies
library(UsingR)
data("babies")
# Baby weight variable
x <- babies$wt
# Draw the histogram
hist(x)
x <- babies$wt
n <- length(x)
# Square-root choice
k <- ceiling(sqrt(n))
# Sturges’ formula
k <- 1 + ceiling(log2(n))
# Rice rule
k <- ceiling(2 * n^(1 / 3))
hist(x,
breaks = seq(min(x), max(x), length.out = k + 1),
xlab = "Weight", main = " ")
# Scott’s normal reference
h <- 3.5 * sqrt(var(x)) / n^(1 / 3)
k <- ceiling((max(x) - min(x)) / h)
# Plot the histogram
hist(x,
breaks = seq(min(x), max(x), length.out = k + 1),
xlab = "Weight", main = " ",
col = "#008542", las = 1)
# Freedman–Diaconis choice
h <- 2 * IQR(x) / n^(1 / 3)
k <- ceiling((max(x) - min(x)) / h)
# Plot the histogram
hist(x,
breaks = seq(min(x), max(x), length.out = k + 1),
xlab = "Weight", main = " ",
col = "#008542", las = 1)
data("exec.pay")
x <- exec.pay
n <- length(x)
# Freedman–Diaconis choice
h <- 2 * IQR(x) / (n^(1 / 3))
k <- ceiling((max(x) - min(x)) / h)
hist(x,
breaks = seq(min(x), max(x), length.out = k + 1),
xlab = "Compensation (10k)")
hist(x,
breaks = seq(min(x), max(x), length.out = k + 1),
xlim = c(0, 200),
xlab = "Compensation (10k)")
# Baby weight variable
x <- babies$wt
# Histogram
hist(x, xlab = " ", freq = TRUE, las = 1)
# Histogram and density plot
hist(x, xlab = " ", freq = FALSE, las = 1)
lines(density(x))
# Density plot only
plot(density(x), xlab = " ", las = 1, main = "Density plot of x")
# ----------------------------------------------------------------------
# Baby weight variable
x <- babies$wt
# Get the quantile summary
summary(x)
# Draw the boxplot
boxplot(x)
boxplot(x, horizontal = TRUE)
par(mfrow = c(2, 1))
hist(x, main = "Histogram", xlab = " ", ylab = " ", xlim = c(60, 180))
boxplot(x, main = "Boxplot", horizontal = TRUE, ylim = c(60, 180))
par(mfrow = c(1, 1))
# violinplot placeholder in original (no base function); using vioplot below
# violinplot(x, col = "orange")
library(vioplot)
vioplot(x, horizontal = TRUE,
xlab = "Newborn weight (oz)",
col = "orange",
main = "The violin plot of baby weights",
cex.main = 1.8)
# Density plot only
par(mfrow = c(1, 1))
plot(density(x), xlab = " ", las = 1, main = "Density plot of x")
hist(x, xlab = " ", freq = FALSE, las = 1, col = "yellow")
lines(density(x), col = "red")
par(mfrow = c(1, 2))
hist(x, xlab = " ", freq = FALSE, las = 1, col = "yellow")
hist(x, xlab = " ", freq = FALSE, las = 1, col = "yellow")
lines(density(x), col = "red", lwd = 4)
# -----
plot(density(x), lwd =3, col = "red")
hist(x, freq = FALSE)
lines(density(x), lwd = 3, col = "red")
par(mfrow = c(1, 2))
hist(x, freq = FALSE, col = "yellow")
hist(x, freq = FALSE, col = "yellow")
lines(density(x), lwd = 3, col = "red")
par(mfrow = c(1,1))
# Create scatter plot with colors based on price range
plot(mobile_data$battery_power, mobile_data$ram,
col = c("black", "green", "red", "orange")[as.numeric(mobile_data$price_range)],
pch = 19,
xlab = "Battery Power",
ylab = "RAM (MB)",
main = "Battery Power vs RAM by Price Range")
# Create scatter plot with colors based on price range
plot(mobile_data$battery_power, mobile_data$ram,
col = c("black", "green", "red", "orange")[as.numeric(mobile_data$price_range)],
pch = 19,
xlab = "Battery Power",
ylab = "RAM (MB)",
main = "Battery Power vs RAM by Price Range")
head(mobile_data$price_range)
# Convert price_range to a factor with proper labels
mobile_data$price_range <- factor(mobile_data$price_range,
levels = c(0, 1, 2, 3),
labels = c("low", "medium", "high", "very high"),
ordered = TRUE)
head(mobile_data$price_range)
The variable price_range has been converted to a factor with levels: "low", "medium", "high", and "very high".
## b)
```{r, problem_1b}
# Create scatter plot with colors based on price range
plot(mobile_data$battery_power, mobile_data$ram,
col = ifelse(mobile_data$price_range == "low", "black",
ifelse(mobile_data$price_range == "medium", "green",
ifelse(mobile_data$price_range == "high", "red", "orange")))
pch = 19,
# Create scatter plot with colors based on price range
plot(mobile_data$battery_power, mobile_data$ram,
col = ifelse(mobile_data$price_range == "low", "black",
ifelse(mobile_data$price_range == "medium", "green",
ifelse(mobile_data$price_range == "high", "red", "orange"))),
pch = 19,
xlab = "Battery Power",
ylab = "RAM (MB)",
main = "Battery Power vs RAM by Price Range")
# Create scatter plot with colors based on price range
plot(mobile_data$battery_power, mobile_data$ram,
col = ifelse(mobile_data$price_range == "low", "black",
ifelse(mobile_data$price_range == "medium", "darkgreen",
ifelse(mobile_data$price_range == "high", "red", "orange"))),
pch = 19,
xlab = "Battery Power",
ylab = "RAM (MB)",
main = "Battery Power vs RAM by Price Range")
# Create scatter plot with colors based on price range
plot(mobile_data$battery_power, mobile_data$ram,
col = ifelse(mobile_data$price_range == "low", "darkblue",
ifelse(mobile_data$price_range == "medium", "purple",
ifelse(mobile_data$price_range == "high", "red", "orange"))),
pch = 19,
xlab = "Battery Power",
ylab = "RAM (MB)",
main = "Battery Power vs RAM by Price Range")
# Create scatter plot with colors based on price range
plot(mobile_data$battery_power, mobile_data$ram,
col = ifelse(mobile_data$price_range == "low", "darkgreen",
ifelse(mobile_data$price_range == "medium", "purple",
ifelse(mobile_data$price_range == "high", "red", "orange"))),
pch = 19,
xlab = "Battery Power",
ylab = "RAM (MB)",
main = "Battery Power vs RAM by Price Range")
legend("topright", legend = levels(mobile_data$price_range),
col = c("darkgreen", "purple", "red", "orange"),
pch = 19)
# Create scatter plot with colors based on price range
plot(mobile_data$battery_power, mobile_data$ram,
col = ifelse(mobile_data$price_range == "low", "darkgreen",
ifelse(mobile_data$price_range == "medium", "purple",
ifelse(mobile_data$price_range == "high", "red", "orange"))),
pch = 19,
xlab = "Battery Power",
ylab = "RAM (MB)",
main = "Battery Power vs RAM by Price Range")
legend("topright", legend = levels(mobile_data$price_range),
col = c("darkgreen", "purple", "red", "orange"),
pch = 19)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
# Problem 1
```{r, problem1}
## a)
```{r, problem_1a}
The variable price_range has been converted to a factor with levels: "low", "medium", "high", and "very high".
## b)
```{r, problem_1b}
legend("topright", legend = levels(mobile_data$price_range),
col = c("darkgreen", "purple", "red", "orange"),
pch = 19)
# Create scatter plot with colors based on price range
plot(mobile_data$battery_power, mobile_data$ram,
col = ifelse(mobile_data$price_range == "low", "darkgreen",
ifelse(mobile_data$price_range == "medium", "purple",
ifelse(mobile_data$price_range == "high", "red", "orange"))),
pch = 19,
xlab = "Battery Power",
ylab = "RAM (MB)",
main = "Battery Power vs RAM by Price Range")
# Convert price_range to a factor with proper labels
mobile_data$price_range <- factor(mobile_data$price_range,
levels = c(0, 1, 2, 3),
labels = c("low", "medium", "high", "very high"),
ordered = TRUE)
head(mobile_data$price_range)
# Convert price_range to a factor with proper labels
mobile_data$price_range <- factor(mobile_data$price_range,
levels = c(0, 1, 2, 3),
labels = c("low", "medium", "high", "very high"),
ordered = TRUE)
head(mobile_data$price_range)
# Add the legend (only categories)
legend("top", inset = c(0, -0.12),
legend = paste("price:", levels(mobile_data$price_range)),
col = c("darkgreen", "purple", "red", "orange"),
pch = 19,
horiz = TRUE,
bty = "n",
xpd = NA)
cor_overall <- cor(mobile_data$ram, mobile_data$battery_power)
cor_overall <- cor(mobile_data$ram, mobile_data$battery_power)
The Pearson correlation between RAM and battery power is r = `r cor_overall`.
cor_overall <- cor(mobile_data$ram, mobile_data$battery_power)
print(cor_overall)
very_high_set <- subset(mobile_data, price_range == "very high")
low_set
low_set <- subset(mobile_data, price_range == "low")
med_set <- subset(mobile_data, price_range == "medium")
high_set <- subset(mobile_data, price_range == "high")
very_high_set <- subset(mobile_data, price_range == "very high")
low_set
med_set
high_set
very_high_set
low_set <- subset(mobile_data, price_range == "low")
med_set <- subset(mobile_data, price_range == "medium")
high_set <- subset(mobile_data, price_range == "high")
very_high_set <- subset(mobile_data, price_range == "very high")
head(low_set)
head(med_set)
head(high_set)
head(very_high_set)
# Create violin plots using base R vioplot package
vioplot(low_set$ram, med_set$ram, high_set$ram, very_high_set$ram,
names = levels(mobile_data$price_range),
col = 1:4,
xlab = "Price Range",
ylab = "RAM (MB)",
main = "Violin Plots of RAM by Price Range")
library(vioplot)
library(vioplot)
vioplot(low_set$ram, med_set$ram, high_set$ram, very_high_set$ram,
names = levels(mobile_data$price_range),
horizontal = TRUE,
col = 1:4,
xlab = "Price Range",
ylab = "RAM (MB)",
main = "Violin Plots of RAM by Price Range")
library(vioplot)
vioplot(low_set$ram, med_set$ram, high_set$ram, very_high_set$ram,
names = NULL,                 # suppress automatic labels
horizontal = TRUE,
col = c("darkgreen", "purple", "red", "orange"),
xlab = "RAM (MB)",
main = "Violin Plots of RAM by Price Range",
yaxt = "n")                   # suppress y-axis
