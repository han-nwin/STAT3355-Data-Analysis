color = "Mother's Age Group",
fill = "Mother's Age Group") +
theme_minimal()
names <-  c("<22","[22 - 28)","[28, 34)",">34")
m_breaks <- cut(babies$age,
breaks = c(-Inf, 22, 28, 34, Inf),
labels = names)
plot(density(babies[which(m_breaks == names[1]), "age"]),
col = 1, xlim = c(10, 50), ylim = c(0, 0.4), main = "")
for(i in 2:4){
lines(density(babies[which(m_breaks == names[i]), "age"]),
col = i)
}
plot(d, col = colors[first_group], lwd = 2,
xlim = range(babies$wt, na.rm = TRUE),
ylim = c(0, max(sapply(levels(babies$age_group), function(g) max(density(babies$wt[babies$age_group == g], na.rm = TRUE)$y)))),
xlab = "Baby's Birthweight (oz)",
ylab = "Density",
main = "Density of Baby's Birthweight by Mother's Age Group")
# Add density lines for the other groups
for (group in levels(babies$age_group)[-1]) {
d <- density(babies$wt[babies$age_group == group], na.rm = TRUE)
lines(d, col = colors[group], lwd = 2)
}
# Add legend
legend("topright", legend = levels(babies$age_group), col = colors, lwd = 2, bty = "n")
# Remove NA values from age_group and wt for plotting
babies_clean <- babies[!is.na(babies$age_group) & !is.na(babies$wt), ]
ggplot(babies_clean, aes(x = wt, color = age_group, fill = age_group)) +
geom_density(alpha = 0.3) +
labs(title = "Density of Baby's Birthweight by Mother's Age Group",
x = "Baby's Birthweight (oz)",
y = "Density",
color = "Mother's Age Group",
fill = "Mother's Age Group") +
theme_minimal()
names <-  c("<22","[22 - 28)","[28, 34)",">34")
m_breaks <- cut(babies$age,
breaks = c(-Inf, 22, 28, 34, Inf),
labels = names)
plot(density(babies[which(m_breaks == names[1]), "age"]),
col = 1, xlim = c(10, 50), ylim = c(0, 0.4), main = "")
for(i in 2:4){
lines(density(babies[which(m_breaks == names[i]), "age"]),
col = i)
}
# Remove NA values from age_group and wt for plotting
babies_clean <- babies[!is.na(babies$age_group) & !is.na(babies$wt), ]
ggplot(babies_clean, aes(x = wt, color = age_group, fill = age_group)) +
geom_density(alpha = 0.3) +
labs(title = "Density of Baby's Birthweight by Mother's Age Group",
x = "Baby's Birthweight (oz)",
y = "Density",
color = "Mother's Age Group",
fill = "Mother's Age Group") +
theme_minimal()
names <-  c("<22","[22 - 28)","[28, 34)",">34")
m_breaks <- cut(babies$age,
breaks = c(-Inf, 22, 28, 34, Inf),
labels = names)
plot(density(babies[which(m_breaks == names[1]), "age"]),
col = 1, xlim = c(10, 50), ylim = c(0, 0.4), main = "")
data("diamonds")
library(lattice)
boxplot(price ~ round(carat), data = diamonds,
ylim = c(0, 30000),
col = "orange")
boxplot(price ~ color, data = diamonds,
ylim = c(0, 30000),
col = "orange")
F_tab <- table(round(diamonds$carat), diamonds$color)
levelplot(F_tab,
ylab = "Color",
xlab = "Carat")
babies$age[which(babies$age == 99)] <- NA
# Create a new variable indicating advanced maternal age
babies$ama <- babies$age >= 35
boxplot(wt ~ ama, data = babies,
xlab = "Advanced Mother's Age",
ylab = "Baby's weight")
subsets <- c("Never", "Now",
"Till pregnancy",
"Once but quit")
plot(density(babies$wt[which(babies$age_group == subsets[1])]),
ylim = c(0, 0.03),
xlab = "Mother's Age Group",
col = 1,
main = "Does smoke affect birth weight?")
# Draw more line
for(i in 2:length(subsets)){
lines(density(babies$wt[which(babies$age_group == subsets[i])]),
col = i)
}
legend("topleft", c("Never", "Now", "Till pregnancy", "Once but quit"),
col = 1:4,
lwd = rep(1.5, 4), lty = c(1, 1, 1, 1),
bty = "n")
# Obtain the density
density_never <- density(babies$wt[which(babies$smoke == "Never")])
density_now <- density(babies$wt[which(babies$smoke == "Now")])
density_till <- density(babies$wt[which(babies$smoke == "Till pregnancy")])
density_quit <- density(babies$wt[which(babies$smoke == "Once but quit")])
# Obtain the plot range
ymin <- min(density_never$y, density_now$y,
density_till$y, density_quit$y)
ymax <- max(density_never$y, density_now$y,
density_till$y, density_quit$y)
xmin <- min(babies$wt)
xmax <- max(babies$wt)
# Use cut to divide the age into groups
babies$age_group <- cut(babies$age, breaks = c(-Inf, 22, 28, 34, Inf),
labels = c("<22", "22-28", "28-34", "34+"),
right = TRUE)
# Define colors for each age group
colors <- c("red", "blue", "green", "purple")
names(colors) <- levels(babies$age_group)
# Plot the density for the first group to set up the plot
first_group <- levels(babies$age_group)[1]
d <- density(babies$wt[babies$age_group == first_group], na.rm = TRUE)
plot(d, col = colors[first_group], lwd = 2,
xlim = range(babies$wt, na.rm = TRUE),
ylim = c(0, max(sapply(levels(babies$age_group), function(g) max(density(babies$wt[babies$age_group == g], na.rm = TRUE)$y)))),
xlab = "Baby's Birthweight (oz)",
ylab = "Density",
main = "Density of Baby's Birthweight by Mother's Age Group")
# Add density lines for the other groups
for (group in levels(babies$age_group)[-1]) {
d <- density(babies$wt[babies$age_group == group], na.rm = TRUE)
lines(d, col = colors[group], lwd = 2)
}
# Add legend
legend("topright", legend = levels(babies$age_group), col = colors, lwd = 2, bty = "n")
# Remove NA values from age_group and wt for plotting
babies_clean <- babies[!is.na(babies$age_group) & !is.na(babies$wt), ]
ggplot(babies_clean, aes(x = wt, color = age_group, fill = age_group)) +
geom_density(alpha = 0.3) +
labs(title = "Density of Baby's Birthweight by Mother's Age Group",
x = "Baby's Birthweight (oz)",
y = "Density",
color = "Mother's Age Group",
fill = "Mother's Age Group") +
theme_minimal()
names <-  c("<22","[22 - 28)","[28, 34)",">34")
m_breaks <- cut(babies$age,
breaks = c(-Inf, 22, 28, 34, Inf),
labels = names)
plot(density(babies[which(m_breaks == names[1]), "age"]),
col = 1, xlim = c(10, 50), ylim = c(0, 0.4), main = "")
plot(d, col = colors[first_group], lwd = 2,
xlim = range(babies$wt, na.rm = TRUE),
ylim = c(0, max(sapply(levels(babies$age_group), function(g) max(density(babies$wt[babies$age_group == g], na.rm = TRUE)$y)))),
xlab = "Baby's Birthweight (oz)",
ylab = "Density",
main = "Density of Baby's Birthweight by Mother's Age Group")
# Add density lines for the other groups
for (group in levels(babies$age_group)[-1]) {
d <- density(babies$wt[babies$age_group == group], na.rm = TRUE)
lines(d, col = colors[group], lwd = 2)
}
plot(density(babies[which(m_breaks == names[1]), "age"]),
col = 1, xlim = c(10, 50), ylim = c(0, 0.4), main = "")
for(i in 2:4){
lines(density(babies[which(m_breaks == names[i]), "age"]),
col = i)
}
# Add a legend
legend("topright",
legend = names,
col = 1:4,
lty = 1,
title = "")
install.packages("gridExtra")
# Load data
library(ggplot2)
data("mpg")
# Question 1
F_tab <- table(mpg$drv,  mpg$class)
barplot(F_tab, col = c("red","green", "blue"),
ylab = "Frequency", las = 1,
legend.text = c ("4-whee",
"Front-wheel",
"Rear-wheel"),
args.legend = list(x = "topleft", bty = "n"),
cex.names = 0.6)
# Question 2
# Boxplot of Highway MPG by drivetrain (excluding "r" and only for compact cars)
boxplot(hwy ~ drv, data = mpg, subset = (drv != "r" & class == "compact"),
las = 1, ylab = "Highway MPG", xlab = "",
names = c("4-wheel", "Front-wheel"))  # Question 3
# Question 3
plot(hwy ~ displ, data = mpg, las = 1,
xlab = "Engine Displacement (L)",
ylab = "Highway MPG", main = "")
# Linear model and regression line
m <- lm(hwy ~ displ, data = mpg)
abline(m, col = "red")
coef(m)
# Load necessary library
library(ggplot2)
# Load data
data("mpg")
# Basic scatter plot
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
# Alternative code using qplot
qplot(x = displ, y = hwy, data = mpg, geom = "point")
# Scatter plot with labels
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
labs(x = "Number of Cylinders",
y = "Highway MPG",
title = "Relationship Between MPG and Cylinder Numbers")
# Scatter plot colored by number of cylinders
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = as.factor(cyl)))
# Scatter plot with different shapes for cylinder categories
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, shape = as.factor(cyl)))
# Scatter plot with size mapped to number of cylinders
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, size = cyl))
# Scatter plot with alpha transparency based on number of cylinders
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, alpha = cyl))
# Scatter plot colored by vehicle class with a custom color scale
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class)) +
scale_color_brewer(palette = "Set1")
# Scatter plot colored by number of cylinders using a distiller scale
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = cyl)) +
scale_colour_distiller(palette = "Blues", direction = 1)
# Scatter plot with multiple aesthetics
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = cty,
size = as.factor(cyl), shape = class)) +
scale_colour_distiller(palette = "Reds", direction = 1)
# Faceted scatter plot by class (2 rows)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~class, nrow = 2)
# Faceted scatter plot using grid layout (columns based on class)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(. ~ class)
# Faceted scatter plot with rows based on class
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(class ~ .)
# Faceted scatter plot by number of cylinders and drivetrain
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(cyl ~ drv)
# Faceted scatter plot by number of cylinders with custom labels
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = as.factor(cyl))) +
facet_wrap(~ cyl, nrow = 2) +
labs(x = "Displacement (Liter)",
y = "Highway Miles per Gallon",
color = "Number of Cylinders")
barplot(F_tab, col = c("red","green", "blue"),
ylab = "Frequency", las = 1,
legend.text = c ("4-whee",
"Front-wheel",
"Rear-wheel"),
args.legend = list(x = "topleft", bty = "n"),
cex.names = 0.6)
barplot(F_tab, col = c("red","green", "blue"),
ylab = "Frequency", las = 1,
legend.text = c ("4-wheel",
"Front-wheel",
"Rear-wheel"),
args.legend = list(x = "topleft", bty = "n"),
cex.names = 0.6)
barplot(F_tab, col = c("red","green", "blue"),
ylab = "Frequency", las = 1,
ylm = c(0, 100),
legend.text = c ("4-wheel",
"Front-wheel",
"Rear-wheel"),
args.legend = list(x = "topleft", bty = "n"),
cex.names = 0.6)
# Load data
library(ggplot2)
data("mpg")
install.packages("gridExtra")
# Load data
library(ggplot2)
data("mpg")
# Question 1
F_tab <- table(mpg$drv,  mpg$class)
barplot(F_tab, col = c("red","green", "blue"),
ylab = "Frequency", las = 1,
ylim = c(0, 100),
legend.text = c ("4-wheel",
"Front-wheel",
"Rear-wheel"),
args.legend = list(x = "topleft", bty = "n"),
cex.names = 0.6)
knitr::opts_chunk$set(echo = TRUE)
# Read the data
mobile_data <- read.csv("train.csv")
mobile_data$ram
max(mobile_data$ram)
library(dplyr)
band <- data.frame(
name = c("John", "George", "Ringo", "Steven", "Paul", "Peter"),
instrument = c("guitar", "drums", "bass", "bass", "guitar", "drums"),
years = c(2, 7, 4, 1, 3, 6)
)
band_new <- filter(data, instrument == "guitar")
band_new <- filter(data, years >= 2 & years <= 4)
band_new <- filter(data, between(years, 2, 4))
band_new <- data[which(data$instrument == "guitar"), ]
band_new <- subset(data, instrument == "guitar")
band_new <- filter(data, instrument == "guitar")
band_new <- data %>% filter(instrument == "guitar")
band_new <- data %>%
filter(instrument %in% c("guitar", "drum")) %>%
arrange(desc(years)) %>%
select(name)
library(dplyr)
band <- data.frame(
name = c("John", "George", "Ringo", "Steven", "Paul", "Peter"),
instrument = c("guitar", "drums", "bass", "bass", "guitar", "drums"),
years = c(2, 7, 4, 1, 3, 6)
)
band_new <- filter(data, instrument == "guitar")
band <- data.frame(
name = c("John", "George", "Ringo", "Steven", "Paul", "Peter"),
instrument = c("guitar", "drums", "bass", "bass", "guitar", "drums"),
years = c(2, 7, 4, 1, 3, 6)
)
band_new <- filter(data, instrument == "guitar")
data <- data.frame(
name = c("John", "George", "Ringo", "Steven", "Paul", "Peter"),
instrument = c("guitar", "drums", "bass", "bass", "guitar", "drums"),
years = c(2, 7, 4, 1, 3, 6)
)
band_new <- filter(data, instrument == "guitar")
band_new <- filter(data, instrument == "guitar")
band_new <- filter(data, years >= 2 & years <= 4)
band_new <- filter(data, between(years, 2, 4))
band_new <- filter(data, instrument == "guitar")
# Load data
library(ggplot2)
# setwd("~/Downloads")
bnames <- read.csv("bnames.csv", stringsAsFactors = FALSE)
# Load data
library(ggplot2)
setwd("~/Desktop/GitHub/STAT3355-Data-Analysis/Module7")
bnames <- read.csv("bnames.csv", stringsAsFactors = FALSE)
bnames_new <- filter(bnames, name == "Kevin")
View(bnames_new)
View(bnames)
bnames %>%
filter(name == "Brandon") %>%
arrange(desc(prop)) %>%
select(-soundex) %>%
mutate(numbers = round(1000 * prop, 0)) %>%
ggplot() +
geom_line(mapping = aes(x = year, y = prop, color = sex)) +
labs(x = "Year", y = "Proportion",
title = "The trend of the name Kevin", color = "Gender")
bnames %>%
filter(name == "Brandon") %>%
arrange(desc(prop)) %>%
select(-soundex) %>%
mutate(numbers = round(1000 * prop, 0)) %>%
ggplot() +
geom_line(mapping = aes(x = year, y = prop, color = sex)) +
labs(x = "Year", y = "Proportion",
title = "The trend of the name Kevin", color = "Gender")
###
band_new <- band %>%
group_by(instrument) %>%
summarise(mean = mean(years, na.rm = TRUE)) %>%
ungroup() %>%
left_join(band, by = "instrument")
# Create band_2 data frame
band_2 <- data.frame(
name = c("John", "George", "Ringo", "Paul", "Brian"),
band = c(FALSE, TRUE, TRUE, FALSE, TRUE)
)
bnames %>%
filter(name == "Kevin") %>%
arrange(desc(prop)) %>%
select(-soundex) %>%
mutate(numbers = round(1000 * prop, 0)) %>%
ggplot() +
geom_line(mapping = aes(x = year, y = prop, color = sex)) +
labs(x = "Year", y = "Proportion",
title = "The trend of the name Kevin", color = "Gender")
bnames %>%
filter(name == "Eleni") %>%
arrange(desc(prop)) %>%
select(-soundex) %>%
mutate(numbers = round(1000 * prop, 0)) %>%
ggplot() +
geom_line(mapping = aes(x = year, y = prop, color = sex)) +
labs(x = "Year", y = "Proportion",
title = "The trend of the name Kevin", color = "Gender")
bnames %>%
filter(name == "Kevin") %>%
arrange(desc(prop)) %>%
select(-soundex) %>%
mutate(numbers = round(1000 * prop, 0)) %>%
ggplot() +
geom_line(mapping = aes(x = year, y = prop, color = sex)) +
labs(x = "Year", y = "Proportion",
title = "The trend of the name Kevin", color = "Gender")
bnames %>%
filter(name == "Bob") %>%
arrange(desc(prop)) %>%
select(-soundex) %>%
mutate(numbers = round(1000 * prop, 0)) %>%
ggplot() +
geom_line(mapping = aes(x = year, y = prop, color = sex)) +
labs(x = "Year", y = "Proportion",
title = "The trend of the name Kevin", color = "Gender")
bnames %>%
filter(name == "Gertrude") %>%
arrange(desc(prop)) %>%
select(-soundex) %>%
mutate(numbers = round(1000 * prop, 0)) %>%
ggplot() +
geom_line(mapping = aes(x = year, y = prop, color = sex)) +
labs(x = "Year", y = "Proportion",
title = "The trend of the name Kevin", color = "Gender")
bnames %>%
filter(name == "Kobe") %>%
arrange(desc(prop)) %>%
select(-soundex) %>%
mutate(numbers = round(1000 * prop, 0)) %>%
ggplot() +
geom_line(mapping = aes(x = year, y = prop, color = sex)) +
labs(x = "Year", y = "Proportion",
title = "The trend of the name Kevin", color = "Gender")
bnames %>%
filter(name == "Lebron") %>%
arrange(desc(prop)) %>%
select(-soundex) %>%
mutate(numbers = round(1000 * prop, 0)) %>%
ggplot() +
geom_line(mapping = aes(x = year, y = prop, color = sex)) +
labs(x = "Year", y = "Proportion",
title = "The trend of the name Kevin", color = "Gender")
bnames %>%
filter(name == "Kevin") %>%
arrange(desc(prop)) %>%
select(-soundex) %>%
mutate(numbers = round(1000 * prop, 0)) %>%
ggplot() +
geom_line(mapping = aes(x = year, y = prop, color = sex)) +
labs(x = "Year", y = "Proportion",
title = "The trend of the name Kevin", color = "Gender")
bnames %>%
filter(name == "Christian") %>%
arrange(desc(prop)) %>%
select(-soundex) %>%
mutate(numbers = round(1000 * prop, 0)) %>%
ggplot() +
geom_line(mapping = aes(x = year, y = prop, color = sex)) +
labs(x = "Year", y = "Proportion",
title = "The trend of the name Kevin", color = "Gender")
bnames %>%
filter(name == "John") %>%
arrange(desc(prop)) %>%
select(-soundex) %>%
mutate(numbers = round(1000 * prop, 0)) %>%
ggplot() +
geom_line(mapping = aes(x = year, y = prop, color = sex)) +
labs(x = "Year", y = "Proportion",
title = "The trend of the name Kevin", color = "Gender")
bnames %>%
filter(name == "Mary") %>%
arrange(desc(prop)) %>%
select(-soundex) %>%
mutate(numbers = round(1000 * prop, 0)) %>%
ggplot() +
geom_line(mapping = aes(x = year, y = prop, color = sex)) +
labs(x = "Year", y = "Proportion",
title = "The trend of the name Kevin", color = "Gender")
bnames %>%
filter(name == "Han") %>%
arrange(desc(prop)) %>%
select(-soundex) %>%
mutate(numbers = round(1000 * prop, 0)) %>%
ggplot() +
geom_line(mapping = aes(x = year, y = prop, color = sex)) +
labs(x = "Year", y = "Proportion",
title = "The trend of the name Kevin", color = "Gender")
bnames %>%
filter(name == "Christian") %>%
arrange(desc(prop)) %>%
select(-soundex) %>%
mutate(numbers = round(1000 * prop, 0)) %>%
ggplot() +
geom_line(mapping = aes(x = year, y = prop, color = sex)) +
labs(x = "Year", y = "Proportion",
title = "The trend of the name Kevin", color = "Gender")
# Load US map data
library(maps)
us_map <- map_data("state")
data("USArrests")
us_arrest <- USArrests
us_arrest$region <- tolower(rownames(USArrests))
us_map <- left_join(us_map, us_arrest, by = "region")
ggplot(us_map) + geom_polygon(mapping = aes(x = long, y = lat, group = group, fill = Murder)) +
coord_quickmap() + scale_fill_gradient(low = "white", high = "#e87500")
ggplot(us_map) + geom_polygon(mapping = aes(x = long, y = lat, group = group, fill = Assault)) +
coord_quickmap() + scale_fill_gradient(low = "white", high = "#e87500")
